<?php

/**
 * @file
 * Tide Station Locator module functionality.
 */

use GuzzleHttp\Client;
use GuzzleHttp\RequestOptions;
use Drupal\Core\File\FileSystemInterface;

/**
 * This function is for accessing the API.
 */
function tide_station_locator_get_api_data() {

  // Path to your .crt and .key files.
  $certPath = '/app/keys/non-prod-client.cer';
  $keyPath = '/app/keys/non-prod-key.key';
  // Path to the CA bundle file.
  $caBundlePath = '/app/keys/cacert.pem';

  // Initiating variables to escape phpcs errors.
  $apiUrl = '';
  // OAuth configuration variables.
  $tokenEndpoint = '';
  $clientId = '';
  $clientSecret = '';
  $rdm_auth = '';

  require "/app/keys/variables.php";

  $client = new Client([
    'base_uri' => $apiUrl,
    'curl' => [
      CURLOPT_SSLCERT => $certPath,
      CURLOPT_SSLKEY => $keyPath,
      CURLOPT_CAINFO => $caBundlePath,
    ],
  ]);

  $accessToken = NULL;
  try {
    $response = $client->post($tokenEndpoint, [
      RequestOptions::FORM_PARAMS => [
        'grant_type' => 'client_credentials',
        'client_id' => $clientId,
        'client_secret' => $clientSecret,
      ],
    ]);

    $data = json_decode($response->getBody()->getContents(), TRUE);
    $accessToken = $data['access_token'];
  }
  catch (\Exception $e) {

    // Handle token retrieval error.
  }

  $payload = [
    'name' => 'STATION_LOCATION',
    'attributes' => [
      [
        'name' => 'ACTIVE',
        'value' => ['Y'],
        'caseSensitive' => FALSE,
      ],
    ],
    'startIndex' => 1,
    'recordCount' => 5,
  ];

  // Make an API request.
  $response = $client->post('technology/rdm/3.0.0/STATION_LOCATION/search', [
    RequestOptions::HEADERS => [
      'Authorization' => 'Bearer ' . $accessToken,
      'rdmAuthorization' => $rdm_auth,
      'Accept' => '*/*',
      'Content-Type' => 'application/json',
      'Accept-Encoding' => 'gzip, deflate, br',
    ],
    RequestOptions::JSON => $payload,
  ]);

  // Get the response body.
  $body = $response->getBody()->getContents();

  $full_data = json_decode($body, TRUE);

  // Process the data so that we can save it in a format we need.
  $stations = $full_data['records'];
  $final_stations = [];
  foreach ($stations as $key => $station) {
    // Loop through attributes.
    foreach ($station['attributes'] as $attribute) {
      // Add attribute name as the key.
      $station[$attribute['name']] = $attribute['value'];
    }
    unset($station['attributes']);
    $final_stations['records'][$key] = $station;
  }

  $file_save_path_stream_directory = 'public://';
  \Drupal::service('file_system')
    ->prepareDirectory($file_save_path_stream_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
  $fileLocation = $file_save_path_stream_directory . '/' . 'stations.json';
  // Save the processed JSON file.
  $file = file_save_data(json_encode($final_stations), $fileLocation, FileSystemInterface::EXISTS_REPLACE);
}
